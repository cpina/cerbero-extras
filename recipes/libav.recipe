# -*- Mode: Python -*- vi:si:et:sw=4:sts=4:ts=4:syntax=python
from cerbero.utils import shell

class Recipe(recipe.Recipe):
    name = 'libav'
    version = '0.8.4'
    licenses = [License.LGPLv2Plus]
    commit = '86aee5cef4fd6914075fca5bb775ebdb43ff89a4'
    configure_tpl = "%(config-sh)s --prefix=%(prefix)s "\
                    "--libdir=%(libdir)s %(options)s"
    force_configure = True
    add_host_build_target = False
    supports_cache_variables = False
    can_use_configure_cache = False
    configure_options = '--disable-avserver --disable-avplay --disable-avprobe' \
        ' --disable-devices --disable-network --disable-hwaccels --disable-filters' \
        ' --disable-doc --enable-optimizations '

    files_bins = ['avconv']

    def prepare(self):
        if self.config.target_platform == Platform.DARWIN:
            if self.config.target_arch == Architecture.X86_64:
                asflags = ' -arch x86_64 -m64'
            elif self.config.target_arch == Architecture.X86:
                asflags = ' -arch i386 -m32'
            elif self.config.target_arch == Architecture.PPC:
                asflags = ' -arch ppc'
            self.new_env = {'ASFLAGS':asflags}

        if self.config.target_platform == Platform.WINDOWS:
            self.configure_options += '--cross-prefix=%s- --target-os=mingw32 --arch=%s --enable-w32threads' %\
                (self.config.host, self.config.target_arch)

    def configure(self):
        super(recipe.Recipe, self).configure()

        if self.config.target_platform == Platform.DARWIN:
            if self.config.target_arch == Architecture.X86:
                replacements = {'HAVE_EBX_AVAILABLE=yes': 'HAVE_EBX_AVAILABLE=no',
                                'HAVE_EBX_AVAILABLE 1': 'HAVE_EBX_AVAILABLE 0',}
                shell.replace(os.path.join(self.build_dir, 'config.mak'), replacements)
                shell.replace(os.path.join(self.build_dir, 'config.h'), replacements)
