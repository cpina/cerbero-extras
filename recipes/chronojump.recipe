# -*- Mode: Python -*- vi:si:et:sw=4:sts=4:ts=4:syntax=python
import shutil

from cerbero.utils import shell
from cerbero.build.build import modify_environment

class Recipe(recipe.Recipe):
    name = 'chronojump'
    version = '1.0'
    licenses = [License.GPL]
    remotes = {'origin': 'git://git.gnome.org/chronojump'}
    config_sh = 'sh autogen.sh'
    commit = 'origin/master'
    deps = ['gstreamer', 'gst-plugins-base', 'mono', 'gtk-sharp']

    platform_files_libs = {
        Platform.DARWIN: ['libcesarplayer'],
        Platform.WINDOWS: ['libcesarplayer'],
    }
    files_lang = ['chronojump']
    files_share = ['share/chronojump']
    files_doc = ['share/doc/chronojump']
    files_icons = ['share/icons/hicolor/48x48/apps/chronojump.png']
    files_pyhon = ['lib/chronojump/python']
    platform_files_bin = {
        Platform.DARWIN: ['%(sdir)s/Chronojump.exe'],
        Platform.WINDOWS: ['%(sdir)s/Chronojump.exe'],
    }
    platform_files_bins = {
        Platform.LINUX: ['chronojump']
    }

    def prepare(self):
        if self.config.target_platform in [Platform.WINDOWS, Platform.DARWIN]:
            search_paths = ['lib/chronojump', 'lib/cli/Db4objects.Db4o-8.0']
            search_paths = [os.path.join(self.config.prefix, f) for f in search_paths]
            if self.config.target_platform == Platform.WINDOWS:
                self.new_env['MONO_PATH'] = ';'.join(search_paths)
            else:
                self.new_env['MONO_PATH'] = ':'.join(search_paths)
            if self.config.target_platform == Platform.DARWIN:
                self.new_env['AS'] = 'as -arch i386'
            cc = os.environ.get('CC', 'gcc')
            self.new_env['CC'] = '%s %s' % (cc, os.environ['CFLAGS'])

    @modify_environment
    def post_install(self):
        if self.config.target_platform in [Platform.WINDOWS, Platform.DARWIN]:
            crlib = os.path.join(self.config.prefix, 'lib', 'chronojump')
            binary = os.path.join(self.config.prefix, self.extensions['sdir'],
                    'Chronojump.exe')
            assembly = os.path.join(crlib, 'Chronojump.exe')
            mkbundle = 'mkbundle -o %s %s --config %s --deps ' % (binary, assembly,
                    os.path.join(self.config.prefix, 'etc', 'mono', 'config'))
            extra_assemblies = []
            for assembly in extra_assemblies:
                mkbundle += ' %s' % os.path.join(self.config.prefix, assembly)
            shell.call(mkbundle)
